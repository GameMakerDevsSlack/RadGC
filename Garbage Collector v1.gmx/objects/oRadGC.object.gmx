<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///setup here

/*
    GC Debug tool. created by Gunter(salvakiya). Special thanks to JuJu for ds type hack.
    
    Supported data:
        list
        map
        grid
        stack
        queue
        priority
        surface
        buffer
*/

//properties
objectlife_cursor_steps = 10;
objectlife_steps = 10;
active = true;

//constants/lifetime options
STEP = 0;
OBJECT = 1;
ROOM = 2;
GAME = 3;


///other stuff
enum radtype{
    list = ds_type_list,
    map = ds_type_map,
    stack = ds_type_stack,
    grid = ds_type_grid,
    queue = ds_type_queue,
    priority = ds_type_priority,
    
    surface = 30,
    buffer = 31,
    part_emitter = 32,
}
maptype = ds_map_create();
maptype[?radtype.list] = "ds_list"
maptype[?radtype.map] = "ds_map"
maptype[?radtype.stack] = "ds_stack"
maptype[?radtype.grid] = "ds_grid"
maptype[?radtype.queue] = "ds_queue"
maptype[?radtype.priority] = "ds_priority"

maptype[?radtype.surface] = "surface"
maptype[?radtype.buffer] = "buffer"
maptype[?radtype.part_emitter] = "particle emitter"


steplife    = ds_list_create();
objectlife  = ds_list_create();
roomlife    = ds_list_create();
gamelife    = ds_list_create();

objectlife_cursor = 0;
alarm[0] = objectlife_steps;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var object_list = objectlife;
var i=objectlife_cursor;
var maxsize = ds_list_size(object_list);
repeat(objectlife_cursor_steps){
    if i&gt;=maxsize{objectlife_cursor=0;break;}
    arr = object_list[|i];
    obj = arr[1];
    if !instance_exists(obj){
        if exists(arr[0]){
            destroy(arr[0]);
            show_debug_message("GC WARN: Found "+maptype[?get_type(arr[0])]+" Leak in: "+arr[2]);
        }
        ds_list_delete(object_list,i);
        i--;maxsize--;
    }else{
        if !exists(arr[0]){
            show_debug_message("GC =) "+maptype[?get_type(arr[0])]+" clean in: "+arr[2]);
            ds_list_delete(object_list,i);
            i--;maxsize--;
        }
    }
i++;objectlife_cursor++
}
//print(ds_list_size(objectlife));
alarm[0] = objectlife_steps;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var step_list = steplife;
var i = 0;
var arr;
repeat(ds_list_size(step_list)){
    arr = step_list[|0];
    if exists(arr[0]){
        destroy(arr[0], true);
        show_debug_message("GC WARN: "+maptype[?get_type(arr[0])]+" Leak in step. was created by: "+arr[1]);
    }
    ds_list_delete(step_list,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var room_list = roomlife;
var i = 0;
var arr;
repeat(ds_list_size(room_list)){
    arr = room_list[|0];
    if exists(arr[0]){
        destroy(arr[0], true);
        show_debug_message("GC WARN: "+maptype[?get_type(arr[0])]+" Leak on room end. was created by: "+arr[1]);
    }
    ds_list_delete(room_list,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
